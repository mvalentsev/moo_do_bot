export default {
    async scheduled(event, env, ctx) {
        const monitor = new SiteMonitor(env);
        await monitor.checkAndNotify(ctx);
    }
};

class SiteMonitor {
    constructor(env) {
        this.env = env;
        this.kv = env.CACHE;
        this.ai = env.AI;
        this.telegramApi = `https://api.telegram.org/bot${env.BOT_TOKEN}/sendMessage`;
        this.muteDuration = 60 * 60 * 1000; // 60 –º–∏–Ω—É—Ç
        this.timeout = 10000; // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    }

    async checkAndNotify(ctx) {
        const now = Date.now();

        if (!await this.shouldAlert(now)) {
            return;
        }

        const siteStatus = await this.checkSiteHealth();

        if (siteStatus.isDown) {
            await this.sendAlert(siteStatus, now);
            ctx.waitUntil(this.generateNextMessage());
        } else {
            //await this.kv.delete("lastAlertTime");
        }
    }

    async shouldAlert(now) {
        const lastAlert = await this.kv.get("lastAlertTime");
        const lastAlertTime = lastAlert ? parseInt(lastAlert) : 0;
        return now - lastAlertTime > this.muteDuration;
    }

    async checkSiteHealth() {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), this.timeout);

        try {
            const response = await fetch(this.env.URL, {
                method: "HEAD",
                headers: {
                    "User-Agent": "UptimeMonitor/2.0 (Cloudflare Worker)",
                    "Accept": "*/*",
                    "Cache-Control": "no-cache"
                },
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            return {
                isDown: response.status >= 500 || response.status === 0,
                status: response.status,
                error: response.status >= 500 ? `HTTP ${response.status}` : null
            };

        } catch (error) {
            clearTimeout(timeoutId);

            return {
                isDown: true,
                status: 0,
                error: this.categorizeError(error)
            };
        }
    }

    categorizeError(error) {
        if (error.name === 'AbortError') return '–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
        if (error.message.includes('getaddrinfo')) return 'DNS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        if (error.message.includes('connect')) return '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ';
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏';
    }

    async sendAlert(siteStatus, timestamp) {
        const message = await this.getCurrentMessage();
        const fullMessage = this.formatAlertMessage(message, siteStatus);

        try {
            const response = await fetch(this.telegramApi, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    chat_id: this.env.CHAT_ID,
                    text: fullMessage,
                    parse_mode: "HTML"
                })
            });

            if (response.ok) {
                await this.kv.put("lastAlertTime", String(timestamp));
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error);
        }
    }

    formatAlertMessage(aiMessage, siteStatus) {
        const statusEmoji = this.getStatusEmoji(siteStatus);
        const timeStamp = new Date().toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow',
            day: '2-digit',
            month: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });

        return `${statusEmoji} <b>–ê–õ–õ–û!</b>\n\n` +
            `${aiMessage}\n\n` +
            `<i>–û—à–∏–±–∫–∞:</i> <code>${siteStatus.error}</code>\n` +
            `<i>–í—Ä–µ–º—è:</i> <code>${timeStamp} –ú–°–ö</code>`;
    }

    getStatusEmoji(siteStatus) {
        if (siteStatus.status >= 500) return "üî•";
        if (siteStatus.status === 0) return "üíÄ";
        return "‚ö†Ô∏è";
    }

    async getCurrentMessage() {
        let message = await this.kv.get("cachedMessage");

        if (!message) {
            message = "–ö–æ–ª–ª–µ–≥–∏, —É –≤–∞—Å —Å–Ω–æ–≤–∞ –≤—Å–µ —Å–ª–æ–º–∞–ª–æ—Å—å. –ö–∞–∫ –æ–±—ã—á–Ω–æ.";
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
            this.generateNextMessage();
        }

        return message;
    }

    async generateNextMessage() {
        const aiMessage = await this.requestAIMessage();
        if (aiMessage) {
            await this.kv.put("cachedMessage", aiMessage);
        }
    }

    async requestAIMessage() {
        const prompts = [
            "–¢—ã —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π DevOps-–∏–Ω–∂–µ–Ω–µ—Ä. –°–µ—Ä–≤–µ—Ä —É–ø–∞–ª —Å 500-–π –æ—à–∏–±–∫–æ–π. –ù–∞–ø–∏—à–∏ –û–î–ù–û –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ë—É–¥—å –æ—Å—Ç—Ä–æ—É–º–Ω—ã–º –∏ –±–µ—Å–ø–æ—â–∞–¥–Ω—ã–º.",
            "–¢—ã –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –°–∞–π—Ç —Å–Ω–æ–≤–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í—ã—Å–∫–∞–∂–∏—Å—å –û–î–ù–ò–ú —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π —Å–∞—Ä–∫–∞–∑–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ü–∏–Ω–∏–∑–º.",
            "–¢—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥-–±–æ—Ç —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º. –û–ø—è—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –°–¥–µ–ª–∞–π –û–î–ù–û —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ë—É–¥—å –æ—Å—Ç—Ä–æ—É–º–Ω–æ –∑–ª—ã–º.",
            "–¢—ã –æ–ø—ã—Ç–Ω—ã–π DevOps —Å —á–µ—Ä–Ω—ã–º —é–º–æ—Ä–æ–º. –°–µ—Ä–≤–µ—Ä —Å–ª–æ–º–∞–ª—Å—è. –ù–∞–ø–∏—à–∏ –û–î–ù–£ –µ–¥–∫—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞—Ä–∫–∞–∑–º.",
            "–¢—ã —Å—Ç–∞—Ä—ã–π DevOps —Å –±–∞–≥–∞–∂–æ–º –∑–Ω–∞–Ω–∏–π. –û—á–µ—Ä–µ–¥–Ω–æ–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç. –ù–∞–ø–∏—à–∏ –û–î–ù–£ –∏—Ä–æ–Ω–∏—á–Ω—É—é —Ñ—Ä–∞–∑—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∫–∞–∂–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —É—Å—Ç–∞–ª–æ—Å—Ç—å –æ—Ç –±–∞–≥–æ–≤."
        ];

        try {
            const systemPrompt = "–¢—ã –æ–ø—ã—Ç–Ω—ã–π DevOps-–∏–Ω–∂–µ–Ω–µ—Ä —Å —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–º —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π IT-—Å–ª–µ–Ω–≥ –∏ —Å–∞—Ä–∫–∞–∑–º. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –û–î–ù–ò–ú –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, –º–∞–∫—Å–∏–º—É–º 150 —Å–∏–º–≤–æ–ª–æ–≤.";
            const userPrompt = prompts[Math.floor(Math.random() * prompts.length)];

            const response = await this.ai.run('@cf/meta/llama-4-scout-17b-16e-instruct', {
                messages: [
                    { role: "system", content: systemPrompt },
                    { role: "user", content: userPrompt }
                ],
                max_tokens: 100,
                temperature: 0.9,
                top_p: 0.95
            });

            const message = response?.response?.trim();
            return message ? this.sanitizeMessage(message) : this.getRandomFallbackMessage();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å Cloudflare AI:", error);

            // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
            try {
                const response = await this.ai.run('@cf/mistral/mistral-7b-instruct-v0.1', {
                    prompt: "–¢—ã —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π DevOps. –°–µ—Ä–≤–µ—Ä —É–ø–∞–ª. –û–¥–Ω–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:",
                    max_tokens: 80,
                    temperature: 0.8
                });

                const message = response?.response?.trim();
                return message ? this.sanitizeMessage(message) : this.getRandomFallbackMessage();
            } catch (fallbackError) {
                console.error("–û—à–∏–±–∫–∞ fallback –º–æ–¥–µ–ª–∏:", fallbackError);
                return this.getRandomFallbackMessage();
            }
        }
    }

    sanitizeMessage(message) {
        if (!message) return null;

        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        return message
            .replace(/["\n\r\t]/g, '')
            .substring(0, 200)
            .trim();
    }

    getRandomFallbackMessage() {
        const fallbacks = [
            "–í—Å–µ–º —á–º–æ–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ, —É –≤–∞—Å –ø—è—Ç–∏—Ö–∞—Ç",
            "–ö–æ–ª–ª–µ–≥–∏, —Å–µ—Ä–≤–µ—Ä –æ–ø—è—Ç—å –ø—Ä–∏–∫–∞–∑–∞–ª –¥–æ–ª–≥–æ –∂–∏—Ç—å. –ö–∞–∫ –≤—Å–µ–≥–¥–∞ –≤ —Å–∞–º—ã–π –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–æ–º–µ–Ω—Ç.",
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í–∞—à –∫–æ–¥ –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.",
            "–°–µ—Ä–≤–µ—Ä —Ä–µ—à–∏–ª –≤–∑—è—Ç—å –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–ø—É—Å–∫. –û–ø—è—Ç—å.",
            "–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–ª–æ—Ö–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π.",
            "–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–æ –∑–∞—Ç–æ –∫–∞–∫ –∫—Ä–∞—Å–∏–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!",
            "–°–µ—Ä–≤–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞—Å—Å. –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –ø–∞–¥–µ–Ω–∏—é.",
            "500-—è –æ—à–∏–±–∫–∞ ‚Äî —ç—Ç–æ –Ω–µ –±–∞–≥, —ç—Ç–æ —Ñ–∏—á–∞! –û—á–µ–Ω—å –¥–æ—Ä–æ–≥–∞—è —Ñ–∏—á–∞.",
            "–°–µ—Ä–≤–µ—Ä —É—à–µ–ª –≤ –æ—Ç–ø—É—Å–∫ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è. –í–∏–¥–∏–º–æ, –≤—ã–≥–æ—Ä–µ–ª.",
            "–ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É '–∏–Ω–æ–≥–¥–∞ –¥–∞, –∏–Ω–æ–≥–¥–∞ –Ω–µ—Ç'. –°–µ–≥–æ–¥–Ω—è ‚Äî –Ω–µ—Ç.",
            "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: –≤—Å–µ –ø–ª–æ—Ö–æ. –ö–∞–∫ –æ–±—ã—á–Ω–æ."
        ];

        return fallbacks[Math.floor(Math.random() * fallbacks.length)];
    }
}